{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to the Nobius docs! \ud83d\ude80 \u00b6 Nobius is a set of utilities which generate and manage Mobius content. On it's own, Mobius is a great tool for authoring content for students. However as your content base grows, you'll soon realize its limitations... In Nobius, although it might be its primary purpose, your authored material lives separate from its form as Mobius content. Make sure to visit our Quickstart Guide to get started! Our Philosophy \u00b6 As an author, your time is best spent generating and refining content, not worrying how you should style or lay it out. The separation of these two main aspects of content creation was the main idea we had in mind when making this tool. Early on, we realized that in general, all questions have a very similar structure, with parts, statements, answers and more. Following a strict structure would ensure the quality of each piece of content. However over time, we realized there is a certain degree of customization required to author effective content. This toolset finds the middle ground, offering a great degree of choice in creating content while remaining opinionated and rigid on its structure.","title":"Welcome!"},{"location":"index.html#welcome-to-the-nobius-docs","text":"Nobius is a set of utilities which generate and manage Mobius content. On it's own, Mobius is a great tool for authoring content for students. However as your content base grows, you'll soon realize its limitations... In Nobius, although it might be its primary purpose, your authored material lives separate from its form as Mobius content. Make sure to visit our Quickstart Guide to get started!","title":"Welcome to the Nobius docs! \ud83d\ude80"},{"location":"index.html#our-philosophy","text":"As an author, your time is best spent generating and refining content, not worrying how you should style or lay it out. The separation of these two main aspects of content creation was the main idea we had in mind when making this tool. Early on, we realized that in general, all questions have a very similar structure, with parts, statements, answers and more. Following a strict structure would ensure the quality of each piece of content. However over time, we realized there is a certain degree of customization required to author effective content. This toolset finds the middle ground, offering a great degree of choice in creating content while remaining opinionated and rigid on its structure.","title":"Our Philosophy"},{"location":"quickstart.html","text":"Quickstart Guide \u00b6 Download \u00b6 You can download the Nobius package at the link below, it includes a suite of rendering scripts, as well as an example tutorial sheet. Download the latest release Prerequisites \u00b6 To start off, you'll have to install the python packages required by each script. These are stored in a file called requirements.txt available in the main download directory. Acquiring them can easily be done using pip (the python package installer): pip install -r requirements.txt You'll also need access to a Mobius account, as a teacher. Setup \u00b6 Info Our set of tools requires a few files to be uploaded to your Mobius content repository. Instead of repeating the same code at the bottom of each rendered question, these \"global\" script and styling files are used. Without them, uploaded content will look garbled and be inoperational. More information about this is available here . In a web browser, navigate to your Content Repository tab on your Mobius account. Click the Import button towards the top of the page and upload the ResourcesBundle.zip file. Now, the Nobius rendering scripts need to be setup to correctly reference the files you just uploaded. They need to know where to look for the global scripts, once sheets are rendered. This is a slightly convoluted step... Opening the Mobius Content Repository in a web browser, select ? Questions under the Current Class tab. You'll then be able to create a Mobius question (you'll be able to delete it later) Click the Create New button at the bottom of the page, and select Question/Text Now that you're in the native Mobius Question Designer tool, within the editor in the Question Text section, select the Image upload button, as seen in the screenshot below. In the Image Properties window that pops up, click the Browser Server button. This will open a new CKFinder window, which allows you to browse through the static files you have stored on mobius. You should be able to see a Scripts folder within the file structure, this comes from the ResourcesBundle you uploaded earlier. Click on it. Within the folder, will be a QuestionsJavascript.txt file. Rightclick it, and select View , as in the screenshot below: This will open the QuestionJavaScript.txt file in a new window. Copy the URL of this page, starting from and including /web/ . Example An example URL might look like this: /web/username/Public_Html/Scripts/QuestionJavaScript.txt Once you have grabbed that URL, open the generateGroup.py file from the Nobius toolset in a text editor. Navigate to line 23, or where the SCRIPTS_LOCATION is defined, and paste in your URL. Nobius is now all setup! Getting started \u00b6 Our tools come packaged with an example sheet you can render on your end in order to test your installation. Once you have completed the setup, simply run the command below. Detailed information for each of the scripts in Nobius are available in the Usage section of this documentation. python generateGroup.py \"C:\\path\\to\\example\\sheet\\folder\\Example set\" Once you've done this, a new renders folder will appear under the Example set folder you just rendered. This contains a .zip file containing all the questions and media that pertain to this test sheet, nicely bundled and ready to be uploaded to Mobius! In the same way you uploaded the ResourcesBundle.zip , you can upload the Example set.zip file directly to your Mobius Content Repository (in your browser). A new folder within the content repository will appear, containing all the questions from the sheet you just uploaded, in the Mobius format. You are now ready to start making your own sheets! have a look at the different sections of this documentation for more help, below are a few suggestions: Sheet File Structure GenerateGroup.py (This is the main script you'll be using) Question Files True-False Response Area","title":"Quickstart Guide"},{"location":"quickstart.html#quickstart-guide","text":"","title":"Quickstart Guide"},{"location":"quickstart.html#download","text":"You can download the Nobius package at the link below, it includes a suite of rendering scripts, as well as an example tutorial sheet. Download the latest release","title":"Download"},{"location":"quickstart.html#prerequisites","text":"To start off, you'll have to install the python packages required by each script. These are stored in a file called requirements.txt available in the main download directory. Acquiring them can easily be done using pip (the python package installer): pip install -r requirements.txt You'll also need access to a Mobius account, as a teacher.","title":"Prerequisites"},{"location":"quickstart.html#setup","text":"Info Our set of tools requires a few files to be uploaded to your Mobius content repository. Instead of repeating the same code at the bottom of each rendered question, these \"global\" script and styling files are used. Without them, uploaded content will look garbled and be inoperational. More information about this is available here . In a web browser, navigate to your Content Repository tab on your Mobius account. Click the Import button towards the top of the page and upload the ResourcesBundle.zip file. Now, the Nobius rendering scripts need to be setup to correctly reference the files you just uploaded. They need to know where to look for the global scripts, once sheets are rendered. This is a slightly convoluted step... Opening the Mobius Content Repository in a web browser, select ? Questions under the Current Class tab. You'll then be able to create a Mobius question (you'll be able to delete it later) Click the Create New button at the bottom of the page, and select Question/Text Now that you're in the native Mobius Question Designer tool, within the editor in the Question Text section, select the Image upload button, as seen in the screenshot below. In the Image Properties window that pops up, click the Browser Server button. This will open a new CKFinder window, which allows you to browse through the static files you have stored on mobius. You should be able to see a Scripts folder within the file structure, this comes from the ResourcesBundle you uploaded earlier. Click on it. Within the folder, will be a QuestionsJavascript.txt file. Rightclick it, and select View , as in the screenshot below: This will open the QuestionJavaScript.txt file in a new window. Copy the URL of this page, starting from and including /web/ . Example An example URL might look like this: /web/username/Public_Html/Scripts/QuestionJavaScript.txt Once you have grabbed that URL, open the generateGroup.py file from the Nobius toolset in a text editor. Navigate to line 23, or where the SCRIPTS_LOCATION is defined, and paste in your URL. Nobius is now all setup!","title":"Setup"},{"location":"quickstart.html#getting-started","text":"Our tools come packaged with an example sheet you can render on your end in order to test your installation. Once you have completed the setup, simply run the command below. Detailed information for each of the scripts in Nobius are available in the Usage section of this documentation. python generateGroup.py \"C:\\path\\to\\example\\sheet\\folder\\Example set\" Once you've done this, a new renders folder will appear under the Example set folder you just rendered. This contains a .zip file containing all the questions and media that pertain to this test sheet, nicely bundled and ready to be uploaded to Mobius! In the same way you uploaded the ResourcesBundle.zip , you can upload the Example set.zip file directly to your Mobius Content Repository (in your browser). A new folder within the content repository will appear, containing all the questions from the sheet you just uploaded, in the Mobius format. You are now ready to start making your own sheets! have a look at the different sections of this documentation for more help, below are a few suggestions: Sheet File Structure GenerateGroup.py (This is the main script you'll be using) Question Files True-False Response Area","title":"Getting started"},{"location":"About/features.html","text":"List of features \u00b6 Icons (with par time and notes from the teacher) Native mobius response areas (Vanilla) Advanced response areas Media support Tabular layout Step by step layouts for worked solutions and structured tutorials H5P Support for interactive video tutorials Comments","title":"List of Features"},{"location":"About/features.html#list-of-features","text":"Icons (with par time and notes from the teacher) Native mobius response areas (Vanilla) Advanced response areas Media support Tabular layout Step by step layouts for worked solutions and structured tutorials H5P Support for interactive video tutorials Comments","title":"List of features"},{"location":"AddonsAndFeatures/FutureAdditions.html","text":"Future additions \u00b6 List of all the features we did not get around to implementing: Move LaTeX rendering from Mobius to the templating engine (this will considerably speed up load times) by rendering the latex to the html directly. This could be done in a number of ways: Use a command line script to generate MathJax or MathML code Use a python package to generate math equations as SVGs Make a call to a MathJax API, similarly to mobius except this will only have to render upon generating the sheets, not in the browser. Storing sheet/question data in CSON or YAML instead of JSON format. This will allow us to: Make use of multiline-strings Have a clearer structure and more readable layout Remove double escpaing backslashes for LaTeX equations. If using JSON, add functionality for author to add notes to question and sheetinfo json files. e.g. author_notes. If using another language which supports comments this wouldn't be necessary. (Could also make compatible with generateJSON scraper by adding it in the author notes box in Mobius) Bring back submit button and rename it to \"Reset\" (See where is brings the student when clicked), so that when a sheet needs to be force-graded when changes are made, the students can be asked to \"reset\" the sheet. Current behaviour of response areas in a single part: Response areas in part and structured tutorial are all marked at once, this means the current standard is to only add response areas in one of those blocks For the future: Make custom 'Check' button that calls to the original one once all the hiding has been done properly. Factually we simulate a click on the original check button which is now hidden after all response areas to be hidden are so. Automatically generate the Lessons and Assignments for generated sheets to save time Give choice of bracket for a matrix response area bracket or square bracket or curly bracket Give arrow controls for matrix response areas Add a custom defaults file for each sheet - like if we want to change the default grading code for a whole sheet we can change it there. This file would override the tool-wide defaults. Fix the \"Try Another\" button for algorithmic questions. Currently it seems to reload the page without calling QuestionJavascript again, causing our whole custom logic to break down. In the future, we should move that button, and attach an extra event handler which would re-run that script, but it might now be as easy as that idk. Improve and get more accurate data collection. For example if a question didn't have any response areas, we probably want a \"Mark as Done\" button for those.","title":"Future additions/changes"},{"location":"AddonsAndFeatures/FutureAdditions.html#future-additions","text":"List of all the features we did not get around to implementing: Move LaTeX rendering from Mobius to the templating engine (this will considerably speed up load times) by rendering the latex to the html directly. This could be done in a number of ways: Use a command line script to generate MathJax or MathML code Use a python package to generate math equations as SVGs Make a call to a MathJax API, similarly to mobius except this will only have to render upon generating the sheets, not in the browser. Storing sheet/question data in CSON or YAML instead of JSON format. This will allow us to: Make use of multiline-strings Have a clearer structure and more readable layout Remove double escpaing backslashes for LaTeX equations. If using JSON, add functionality for author to add notes to question and sheetinfo json files. e.g. author_notes. If using another language which supports comments this wouldn't be necessary. (Could also make compatible with generateJSON scraper by adding it in the author notes box in Mobius) Bring back submit button and rename it to \"Reset\" (See where is brings the student when clicked), so that when a sheet needs to be force-graded when changes are made, the students can be asked to \"reset\" the sheet. Current behaviour of response areas in a single part: Response areas in part and structured tutorial are all marked at once, this means the current standard is to only add response areas in one of those blocks For the future: Make custom 'Check' button that calls to the original one once all the hiding has been done properly. Factually we simulate a click on the original check button which is now hidden after all response areas to be hidden are so. Automatically generate the Lessons and Assignments for generated sheets to save time Give choice of bracket for a matrix response area bracket or square bracket or curly bracket Give arrow controls for matrix response areas Add a custom defaults file for each sheet - like if we want to change the default grading code for a whole sheet we can change it there. This file would override the tool-wide defaults. Fix the \"Try Another\" button for algorithmic questions. Currently it seems to reload the page without calling QuestionJavascript again, causing our whole custom logic to break down. In the future, we should move that button, and attach an extra event handler which would re-run that script, but it might now be as easy as that idk. Improve and get more accurate data collection. For example if a question didn't have any response areas, we probably want a \"Mark as Done\" button for those.","title":"Future additions"},{"location":"CustomizationAndResources/QuestionJavascript.html","text":"QuestionJavaScript.js \u00b6 This script is crucial to the proper display of questions created using Nobius. Its features can be broken down into ones which alter Mobius' defaults and design, and ones which dictate the logic for our custom modules. This file is saved on the Mobius file server (as a .txt as .js files are not allowed), it is imported by every question created by this tool. This allows for changes in logic to be made to a single file, and reflected on all questions which import it at once. Mobius Alterations \u00b6 Although Mobius is a very featureful system, it doesn't provide its users with the upmost level of customization. This script gets around that by modifying the elements on the page when it has already been loaded. The 'How did I do?' button \u00b6 This script heavily modifies the behaviour of this button for our system. By default, Mobius will include one of these at the bottom of a page, which once clicked will mark all of the response areas on the page. However, our system includes question parts under different tabs, which could each contain response areas. We don't want hidden response areas to be marked. The solution therefore developed works as follows: The button is copied next to response areas in each of the tabs Its styling and text is modified to better fit our custom theme Response areas that are on tabs which are currently not in view are \"soft hidden\". This mean their ids are modified to that Mobius cannot detect them if the \"Check\" button is pressed. This 'soft hiding' mechanic is carried out whenever the active tab changes (the newly appeared response areas are reactivated, and the previous ones are 'soft hidden' again) Mobius will make the \"Check\" button disappear when it has been pressed, in order to bring it back on tab change, we trigger a click event on the now hidden response area. An added feature given is the ability to trigger the \"Check\" button on pressing enter in a response area. Styles \u00b6 Bottom navigation banner changes: Remove unused buttons (like \"Save\" and \"Next Unit Item\") Remove mention of \"Page\" Page style changes: Remove border around question container on hover Remove questionButtons (the How did I Do button is dealt with) Remove Number/Unit help buttons Maple question buttons Remove unused buttons Insert custom preview button Insert custom Maple Help button Custom logic \u00b6 All of the JavaScript event handlers for the custom tabs and buttons are declared in this script. These include: Question part tabs Help button Final answer, worked solutions and structured tutorial buttons Step by step worked solutions navigation buttons Warning tooltips for answer help buttons Injecting Comment thread HTML and event handlers","title":"QuestionJavascript"},{"location":"CustomizationAndResources/QuestionJavascript.html#questionjavascriptjs","text":"This script is crucial to the proper display of questions created using Nobius. Its features can be broken down into ones which alter Mobius' defaults and design, and ones which dictate the logic for our custom modules. This file is saved on the Mobius file server (as a .txt as .js files are not allowed), it is imported by every question created by this tool. This allows for changes in logic to be made to a single file, and reflected on all questions which import it at once.","title":"QuestionJavaScript.js"},{"location":"CustomizationAndResources/QuestionJavascript.html#mobius-alterations","text":"Although Mobius is a very featureful system, it doesn't provide its users with the upmost level of customization. This script gets around that by modifying the elements on the page when it has already been loaded.","title":"Mobius Alterations"},{"location":"CustomizationAndResources/QuestionJavascript.html#the-how-did-i-do-button","text":"This script heavily modifies the behaviour of this button for our system. By default, Mobius will include one of these at the bottom of a page, which once clicked will mark all of the response areas on the page. However, our system includes question parts under different tabs, which could each contain response areas. We don't want hidden response areas to be marked. The solution therefore developed works as follows: The button is copied next to response areas in each of the tabs Its styling and text is modified to better fit our custom theme Response areas that are on tabs which are currently not in view are \"soft hidden\". This mean their ids are modified to that Mobius cannot detect them if the \"Check\" button is pressed. This 'soft hiding' mechanic is carried out whenever the active tab changes (the newly appeared response areas are reactivated, and the previous ones are 'soft hidden' again) Mobius will make the \"Check\" button disappear when it has been pressed, in order to bring it back on tab change, we trigger a click event on the now hidden response area. An added feature given is the ability to trigger the \"Check\" button on pressing enter in a response area.","title":"The 'How did I do?' button"},{"location":"CustomizationAndResources/QuestionJavascript.html#styles","text":"Bottom navigation banner changes: Remove unused buttons (like \"Save\" and \"Next Unit Item\") Remove mention of \"Page\" Page style changes: Remove border around question container on hover Remove questionButtons (the How did I Do button is dealt with) Remove Number/Unit help buttons Maple question buttons Remove unused buttons Insert custom preview button Insert custom Maple Help button","title":"Styles"},{"location":"CustomizationAndResources/QuestionJavascript.html#custom-logic","text":"All of the JavaScript event handlers for the custom tabs and buttons are declared in this script. These include: Question part tabs Help button Final answer, worked solutions and structured tutorial buttons Step by step worked solutions navigation buttons Warning tooltips for answer help buttons Injecting Comment thread HTML and event handlers","title":"Custom logic"},{"location":"CustomizationAndResources/TemplatesAndJinja.html","text":"Templates and Jinja \u00b6 This tool uses the python Jinja2 templating engine to generate html pages which make up questions. It uses Jinja macros as modular building blocks, and custom filters when more complex operations are required. For example, the root template master.xml will make use of the makeQuestion.xml macro which itself makes use of questionText.html . These template files are contained in the templates folder. For more information on how to use Jinja, it's documentation is really good.","title":"Templates and Jinja"},{"location":"CustomizationAndResources/TemplatesAndJinja.html#templates-and-jinja","text":"This tool uses the python Jinja2 templating engine to generate html pages which make up questions. It uses Jinja macros as modular building blocks, and custom filters when more complex operations are required. For example, the root template master.xml will make use of the makeQuestion.xml macro which itself makes use of questionText.html . These template files are contained in the templates folder. For more information on how to use Jinja, it's documentation is really good.","title":"Templates and Jinja"},{"location":"ResponseAreas/Advanced/custom.html","text":"Custom response area Documentation \u00b6 This type of response area is a superset of the \"Vanilla\" Mobius response areas. It gives the user full control over the layout, styling and display of input fields by allowing rich HTML input in the layout field . Essentially this response area is just a wrapper around vanilla response areas to give more control over their positions and styling. Examples of such control would be in-paragraph response areas, or complex table layouts Usage in a question JSON file: \u00b6 \"custom_response\" : { \"layout\" : \"Rich HTML\" , \"responses\" : [ { \"mode\" : \"\" , \"more params...\" }, ... ] } layout \u00b6 The layout field accepts rich HTML for where and how the responses in responses should be displayed for the student. The positions for each of the response areas should be marked using <1>, <2>, <3>, ... tags. Indexed starting from 1, this denotes which response in the responses list to use. Being stored in a JSON file, the layout string should be reduced to one line, and escape any quote characters (\" -> \\\") NOTE: This is also how Mobius natively labels its response areas in question XML files responses \u00b6 This is a list containing the params for each of the response areas labelled in layout . Any vanilla maple response area ( maple , numeric , list , etc..) can be used here. Params use the same format as described in their respective response area documentations. Example Usage with a HTML table \u00b6 \"custom_response\" : { \"layout\" : \"<p>Input the params for this system:</p> <br> <table> <tr><td>Mass:</td><td><1></td></tr> <tr><td>Speed:</td><td><2></td><tr> </table>\" , \"responses\" : [ { \"mode\" : \"Numeric\" , \"answer\" : { \"units\" : \"kg\" , \"num\" : 15 } }, { \"mode\" : \"Numeric\" , \"answer\" : { \"units\" : \"m/s\" , \"num\" : 19.7 } } ] } A beautified version of the html in the layout of this example looks like this: < p > Input the params for this system: </ p > < br > < table > < tr > < td > Mass: </ td > < td >< 1 ></ td > </ tr > < tr > < td > Speed: </ td > < td >< 2 ></ td > < tr > </ table > The mass and speed response areas will appear where those <1> and <2> tags appear respectively.","title":"Custom"},{"location":"ResponseAreas/Advanced/custom.html#custom-response-area-documentation","text":"This type of response area is a superset of the \"Vanilla\" Mobius response areas. It gives the user full control over the layout, styling and display of input fields by allowing rich HTML input in the layout field . Essentially this response area is just a wrapper around vanilla response areas to give more control over their positions and styling. Examples of such control would be in-paragraph response areas, or complex table layouts","title":"Custom response area Documentation"},{"location":"ResponseAreas/Advanced/custom.html#usage-in-a-question-json-file","text":"\"custom_response\" : { \"layout\" : \"Rich HTML\" , \"responses\" : [ { \"mode\" : \"\" , \"more params...\" }, ... ] }","title":"Usage in a question JSON file:"},{"location":"ResponseAreas/Advanced/custom.html#layout","text":"The layout field accepts rich HTML for where and how the responses in responses should be displayed for the student. The positions for each of the response areas should be marked using <1>, <2>, <3>, ... tags. Indexed starting from 1, this denotes which response in the responses list to use. Being stored in a JSON file, the layout string should be reduced to one line, and escape any quote characters (\" -> \\\") NOTE: This is also how Mobius natively labels its response areas in question XML files","title":"layout"},{"location":"ResponseAreas/Advanced/custom.html#responses","text":"This is a list containing the params for each of the response areas labelled in layout . Any vanilla maple response area ( maple , numeric , list , etc..) can be used here. Params use the same format as described in their respective response area documentations.","title":"responses"},{"location":"ResponseAreas/Advanced/custom.html#example-usage-with-a-html-table","text":"\"custom_response\" : { \"layout\" : \"<p>Input the params for this system:</p> <br> <table> <tr><td>Mass:</td><td><1></td></tr> <tr><td>Speed:</td><td><2></td><tr> </table>\" , \"responses\" : [ { \"mode\" : \"Numeric\" , \"answer\" : { \"units\" : \"kg\" , \"num\" : 15 } }, { \"mode\" : \"Numeric\" , \"answer\" : { \"units\" : \"m/s\" , \"num\" : 19.7 } } ] } A beautified version of the html in the layout of this example looks like this: < p > Input the params for this system: </ p > < br > < table > < tr > < td > Mass: </ td > < td >< 1 ></ td > </ tr > < tr > < td > Speed: </ td > < td >< 2 ></ td > < tr > </ table > The mass and speed response areas will appear where those <1> and <2> tags appear respectively.","title":"Example Usage with a HTML table"},{"location":"ResponseAreas/Advanced/matrix.html","text":"Matrix response area \u00b6 This advanced response area allows the user to generate an array of Numeric or Maple response areas (see \"Response Areas/Vanilla\" for more information). The idea is that the user sets up the parameters to be used for all the response areas to be generated, with only the answer field changing with each generated response area. For the input syntax, the general idea was to keep matrix response areas as close as possible to their individual Mobius counterparts (i.e. \"answer\" for Numeric and \"mapleAnswer\" for Maple ). Minimum Parameters \u00b6 These are same as for their single Mobius counterpart, the way a matrix response is selected is by adding Matrix in front of the usual mode field: mode can be either Matrix Maple or Matrix Numeric For this response area, the other minimum required parameter is a 2D array of answers relevant to the mode chosen. It is the shape of this array that will determine the shape of the matrix generated . Matrix Maple \u00b6 mapleAnswer must be a 2D array of strings containing the maple answers for each relevant cell in the matrix Matrix Numeric \u00b6 answer WARNING : This is different to the vanilla Numeric response area - as units are always disabled in a matrix, this field can be a 2D array of floats. (it doesn't need to be an object containing num and units ) Extra Parameters \u00b6 All the extra parameters relevant to the vanilla version of the response area you chose can be added. Visit their relevant documentations for more information. The only difference is that for Matrix Numeric , showUnits will always be set to false. Example Usage \u00b6 Example Matrix Maple Response Area: \"response\" : { \"mode\" : \"Matrix Maple\" , \"mapleAnswer\" : [ [ \"2*x\" , \"5*x + y\" ], [ \"x + y\" , \"-6*y\" ] ] } Example Matrix Numeric Response Area: \"response\" : { \"grading\" : \"toler_abs\" , \"err\" : 0.001 , \"mode\" : \"Matrix Numeric\" , \"answer\" : [ [ 3.2 , 4.6 ], [ 7.6 , 1.0 ] ] } In this case, the default parameters for err and grading were changed. This will be reflected in all the response areas which eventually make up this matrix for the student. Note: The relevant template for this response area can be found in templates/matrixResponse.html","title":"Matrix"},{"location":"ResponseAreas/Advanced/matrix.html#matrix-response-area","text":"This advanced response area allows the user to generate an array of Numeric or Maple response areas (see \"Response Areas/Vanilla\" for more information). The idea is that the user sets up the parameters to be used for all the response areas to be generated, with only the answer field changing with each generated response area. For the input syntax, the general idea was to keep matrix response areas as close as possible to their individual Mobius counterparts (i.e. \"answer\" for Numeric and \"mapleAnswer\" for Maple ).","title":"Matrix response area"},{"location":"ResponseAreas/Advanced/matrix.html#minimum-parameters","text":"These are same as for their single Mobius counterpart, the way a matrix response is selected is by adding Matrix in front of the usual mode field: mode can be either Matrix Maple or Matrix Numeric For this response area, the other minimum required parameter is a 2D array of answers relevant to the mode chosen. It is the shape of this array that will determine the shape of the matrix generated .","title":"Minimum Parameters"},{"location":"ResponseAreas/Advanced/matrix.html#matrix-maple","text":"mapleAnswer must be a 2D array of strings containing the maple answers for each relevant cell in the matrix","title":"Matrix Maple"},{"location":"ResponseAreas/Advanced/matrix.html#matrix-numeric","text":"answer WARNING : This is different to the vanilla Numeric response area - as units are always disabled in a matrix, this field can be a 2D array of floats. (it doesn't need to be an object containing num and units )","title":"Matrix Numeric"},{"location":"ResponseAreas/Advanced/matrix.html#extra-parameters","text":"All the extra parameters relevant to the vanilla version of the response area you chose can be added. Visit their relevant documentations for more information. The only difference is that for Matrix Numeric , showUnits will always be set to false.","title":"Extra Parameters"},{"location":"ResponseAreas/Advanced/matrix.html#example-usage","text":"Example Matrix Maple Response Area: \"response\" : { \"mode\" : \"Matrix Maple\" , \"mapleAnswer\" : [ [ \"2*x\" , \"5*x + y\" ], [ \"x + y\" , \"-6*y\" ] ] } Example Matrix Numeric Response Area: \"response\" : { \"grading\" : \"toler_abs\" , \"err\" : 0.001 , \"mode\" : \"Matrix Numeric\" , \"answer\" : [ [ 3.2 , 4.6 ], [ 7.6 , 1.0 ] ] } In this case, the default parameters for err and grading were changed. This will be reflected in all the response areas which eventually make up this matrix for the student. Note: The relevant template for this response area can be found in templates/matrixResponse.html","title":"Example Usage"},{"location":"ResponseAreas/Vanilla/list.html","text":"List Response \u00b6 List response areas are similar to Multiple Choice except they are able to be inline with text. These response areas are drop-down menus by default, but can also be a text field where user must write the answer without knowing the options. Weightings are given to each option, so multiple answers can be graded as correct. Minimum Parameters \u00b6 The minimum parameters needed to create a list response area are: mode must be List . answer must be an array of strings that are the options a student can pick from. The strings cannot contain any HTML as this will not be rendered. credit must be an array of numbers that correspond to the weighting of each answer. The points scored for any answer will be its weighting divided by the maximum weighting. Extra Parameters \u00b6 display must be an object containing two parameters, display and permute : display must be either menu or text . This determines whether the list is presented as a drop-down menu of options, or as a text field that the user must fill in. By default, this is set to menu . permute determines whether the set of options are randomly ordered. Must be a boolean and is true by default. \"display\" : { \"display\" : \"menu\" , \"permute\" : true } grader determines how answers in a text field are graded. This parameter is only necessary for text fields. There are several options: exact requires a student's response to match an answer exactly in order to gain points. relaxed requires a student's response to match an answer in order to gain points, but is not case sensitive. regex requires a student's response to match a regular expression, which would be set in the list of answers. Example Usage \u00b6 Taken from ME2 Fluids Mechanics tutorial sheet 13, this List response area creates a drop-down menu below the question statement, and the user needs to choose The boundary layer is thin in order to get the point. { \"statement\" : \"What observation did we make about the boundary layer to start the approximation?\" , \"response\" : { \"mode\" : \"List\" , \"answers\" : [ \"The boundary layer is fast\" , \"Air is not a fluid\" , \"The boundary layer is thick\" , \"The boundary layer is thin\" , \"Water is wet\" ], \"credits\" : [ 0 , 0 , 0 , 1 , 0 ] } }","title":"List"},{"location":"ResponseAreas/Vanilla/list.html#list-response","text":"List response areas are similar to Multiple Choice except they are able to be inline with text. These response areas are drop-down menus by default, but can also be a text field where user must write the answer without knowing the options. Weightings are given to each option, so multiple answers can be graded as correct.","title":"List Response"},{"location":"ResponseAreas/Vanilla/list.html#minimum-parameters","text":"The minimum parameters needed to create a list response area are: mode must be List . answer must be an array of strings that are the options a student can pick from. The strings cannot contain any HTML as this will not be rendered. credit must be an array of numbers that correspond to the weighting of each answer. The points scored for any answer will be its weighting divided by the maximum weighting.","title":"Minimum Parameters"},{"location":"ResponseAreas/Vanilla/list.html#extra-parameters","text":"display must be an object containing two parameters, display and permute : display must be either menu or text . This determines whether the list is presented as a drop-down menu of options, or as a text field that the user must fill in. By default, this is set to menu . permute determines whether the set of options are randomly ordered. Must be a boolean and is true by default. \"display\" : { \"display\" : \"menu\" , \"permute\" : true } grader determines how answers in a text field are graded. This parameter is only necessary for text fields. There are several options: exact requires a student's response to match an answer exactly in order to gain points. relaxed requires a student's response to match an answer in order to gain points, but is not case sensitive. regex requires a student's response to match a regular expression, which would be set in the list of answers.","title":"Extra Parameters"},{"location":"ResponseAreas/Vanilla/list.html#example-usage","text":"Taken from ME2 Fluids Mechanics tutorial sheet 13, this List response area creates a drop-down menu below the question statement, and the user needs to choose The boundary layer is thin in order to get the point. { \"statement\" : \"What observation did we make about the boundary layer to start the approximation?\" , \"response\" : { \"mode\" : \"List\" , \"answers\" : [ \"The boundary layer is fast\" , \"Air is not a fluid\" , \"The boundary layer is thick\" , \"The boundary layer is thin\" , \"Water is wet\" ], \"credits\" : [ 0 , 0 , 0 , 1 , 0 ] } }","title":"Example Usage"},{"location":"ResponseAreas/Vanilla/maple.html","text":"Maple-Graded Response \u00b6 Maple Graded response areas allow a user to write an equation as their answer. Maple graded questions are designed so that any mathematically equivalent equation can be marked as correct. However, they are only capable algebraic equations, as opposed to integrals or more complicated operators. Minimum Parameters \u00b6 The minimum parameters needed to create a maple response area are: mode must be Maple . mapleAnswer must be a string containing the answer in maple syntax. Extra Parameters \u00b6 type must be either formula or maple . This determines what maths engine is used to evaluate mathematically equivalent equations. plot should always be an empty string, as we do not know how this works exactly. allow2d must always be 0 for text entry only, 1 text or symbolic entry from which the student can choose, or 2 for symbolic entry only. mathConversionMode should always be 0 as we do not know exactly how this works. maple is a string of maple code which determines how the answer is graded using the $ANSWER and $RESPONSE variables. By default this is evalb(($ANSWER)-($RESPONSE)=0); . Although type may be set to formula , we recommend keeping it as maple as this will allow students to choose between symbolic and text entry. If students choose symbolic, it may cause the UI design to break. For the same reason, we also recommend keeping allow2d set to 0 . Example Usage \u00b6 Taken from ME2 Fluids Mechanics tutorial sheet 1, this part contains a Maple response area where the user needs to type a maple equation that is mathematically equivalent to (pi/6)*(rho*(U^2)*(R^2)) into the textbox in order to get the point. { \"statement\" : \"The drag force \\\\(F\\\\) of the submarine (insert \\\\(\\\\rho\\\\) as \\\\(rho\\\\)).\" , \"response\" : { \"mode\" : \"Maple\" , \"mapleAnswer\" : \"(pi/6)*(rho*(U^2)*(R^2))\" }, \"final_answer\" : { \"text\" : \"\\\\( \\\\boxed{F = \\\\frac{\\\\pi}{6}\\\\rho U^2 R^2} \\\\)\" } }","title":"Maple Graded"},{"location":"ResponseAreas/Vanilla/maple.html#maple-graded-response","text":"Maple Graded response areas allow a user to write an equation as their answer. Maple graded questions are designed so that any mathematically equivalent equation can be marked as correct. However, they are only capable algebraic equations, as opposed to integrals or more complicated operators.","title":"Maple-Graded Response"},{"location":"ResponseAreas/Vanilla/maple.html#minimum-parameters","text":"The minimum parameters needed to create a maple response area are: mode must be Maple . mapleAnswer must be a string containing the answer in maple syntax.","title":"Minimum Parameters"},{"location":"ResponseAreas/Vanilla/maple.html#extra-parameters","text":"type must be either formula or maple . This determines what maths engine is used to evaluate mathematically equivalent equations. plot should always be an empty string, as we do not know how this works exactly. allow2d must always be 0 for text entry only, 1 text or symbolic entry from which the student can choose, or 2 for symbolic entry only. mathConversionMode should always be 0 as we do not know exactly how this works. maple is a string of maple code which determines how the answer is graded using the $ANSWER and $RESPONSE variables. By default this is evalb(($ANSWER)-($RESPONSE)=0); . Although type may be set to formula , we recommend keeping it as maple as this will allow students to choose between symbolic and text entry. If students choose symbolic, it may cause the UI design to break. For the same reason, we also recommend keeping allow2d set to 0 .","title":"Extra Parameters"},{"location":"ResponseAreas/Vanilla/maple.html#example-usage","text":"Taken from ME2 Fluids Mechanics tutorial sheet 1, this part contains a Maple response area where the user needs to type a maple equation that is mathematically equivalent to (pi/6)*(rho*(U^2)*(R^2)) into the textbox in order to get the point. { \"statement\" : \"The drag force \\\\(F\\\\) of the submarine (insert \\\\(\\\\rho\\\\) as \\\\(rho\\\\)).\" , \"response\" : { \"mode\" : \"Maple\" , \"mapleAnswer\" : \"(pi/6)*(rho*(U^2)*(R^2))\" }, \"final_answer\" : { \"text\" : \"\\\\( \\\\boxed{F = \\\\frac{\\\\pi}{6}\\\\rho U^2 R^2} \\\\)\" } }","title":"Example Usage"},{"location":"ResponseAreas/Vanilla/multiple_choice.html","text":"Multiple Choice Response \u00b6 Multiple Choice response areas give a user a set of choices that they must pick from. There is only one correct answer, unlike list response areas where points can be allocated to each option. Minimum Parameters \u00b6 The minimum parameters needed to create a multiple choice response area are: mode must be Non Permuting Multiple Choice . choice must be an array of strings, in which can be any valid HTML, or LaTeX using \\\\( and \\\\) . answer must be an integer to which item in the choice array is the correct (first position would be 1). Extra Parameters \u00b6 display must be either horizontal or vertical . This determines which way the choices are list. By default this is vertical . Please note, the UI has only been designed for vertical display, so using horizontal may affect the page style. Example Usage \u00b6 Taken from a test Fluid Mechanics sheet, this part contains a Multiple Choice response area that displays the options vertically. The user needs to choose the second option into the textbox in order to get the point. Note here that HTML and LaTeX are being rendered for each choice. { \"statement\" : \"Which of the following gives the correct expression for the magnitude of the power, \\\\(P\\\\), required to drive the rotor?\" , \"response\" : { \"mode\" : \"Non Permuting Multiple Choice\" , \"answer\" : 2 , \"choices\" : [ \"<p>\\\\(P = \\\\frac{2\\\\pi L\\\\omega^2 R^3 \\\\mu}{d}\\\\)</p>\" , \"<p>\\\\(P = \\\\frac{2\\\\pi L\\\\omega R^3 \\\\mu}{d}\\\\)</p>\" , \"<p>\\\\(P = \\\\frac{\\\\pi L\\\\omega^2 d^3 \\\\mu}{R^2}\\\\)</p>\" , \"<p>\\\\(P = \\\\frac{2\\\\pi L\\\\omega^3 d^2 \\\\mu^2}{R^2}\\\\)</p>\" ] } }","title":"Multiple Choice"},{"location":"ResponseAreas/Vanilla/multiple_choice.html#multiple-choice-response","text":"Multiple Choice response areas give a user a set of choices that they must pick from. There is only one correct answer, unlike list response areas where points can be allocated to each option.","title":"Multiple Choice Response"},{"location":"ResponseAreas/Vanilla/multiple_choice.html#minimum-parameters","text":"The minimum parameters needed to create a multiple choice response area are: mode must be Non Permuting Multiple Choice . choice must be an array of strings, in which can be any valid HTML, or LaTeX using \\\\( and \\\\) . answer must be an integer to which item in the choice array is the correct (first position would be 1).","title":"Minimum Parameters"},{"location":"ResponseAreas/Vanilla/multiple_choice.html#extra-parameters","text":"display must be either horizontal or vertical . This determines which way the choices are list. By default this is vertical . Please note, the UI has only been designed for vertical display, so using horizontal may affect the page style.","title":"Extra Parameters"},{"location":"ResponseAreas/Vanilla/multiple_choice.html#example-usage","text":"Taken from a test Fluid Mechanics sheet, this part contains a Multiple Choice response area that displays the options vertically. The user needs to choose the second option into the textbox in order to get the point. Note here that HTML and LaTeX are being rendered for each choice. { \"statement\" : \"Which of the following gives the correct expression for the magnitude of the power, \\\\(P\\\\), required to drive the rotor?\" , \"response\" : { \"mode\" : \"Non Permuting Multiple Choice\" , \"answer\" : 2 , \"choices\" : [ \"<p>\\\\(P = \\\\frac{2\\\\pi L\\\\omega^2 R^3 \\\\mu}{d}\\\\)</p>\" , \"<p>\\\\(P = \\\\frac{2\\\\pi L\\\\omega R^3 \\\\mu}{d}\\\\)</p>\" , \"<p>\\\\(P = \\\\frac{\\\\pi L\\\\omega^2 d^3 \\\\mu}{R^2}\\\\)</p>\" , \"<p>\\\\(P = \\\\frac{2\\\\pi L\\\\omega^3 d^2 \\\\mu^2}{R^2}\\\\)</p>\" ] } }","title":"Example Usage"},{"location":"ResponseAreas/Vanilla/numeric.html","text":"Numeric Response \u00b6 Numeric response areas accept a number for an answer. At their simplest, they can be a single input box expecting an exact value. However they can be controlled to accept a physical unit too, or mark answers to a prescribed tolerance. Minimum Parameters \u00b6 The minimum parameters needed to create a numeric response area are: mode which must be Numeric answer which must be an object containing num , which holds correct answer as a number. { \"mode\" : \"Numeric\" , \"answer\" : { \"num\" : 3.1415 } } Extra Parameters \u00b6 showUnits must be either true or false . This determines if the user must also put in a correct unit. If true, then answer.units becomes a required parameter. By default, it is false. units which must be placed within answer , must be a string containing the correct physical constant of the answer. This should only be added to properties if showUnits is true: { \"mode\" : \"Numeric\" , \"showUnits\" : true , \"answer\" : { \"num\" : 1000 , \"units\" : \"kg\" } } negStyle must be either minus , paren or both to allow a minus sign, parentheses or both to be used for negation. By default, it is minus . numStyle must be a string containing certain keywords words separated by a whitepace. These keywords are: thousands which allows a user to use commas as a seaparator in their answer. This is included by default. scientific which allows a user to use E+10 , E-3 , etc. to denote orders of magnitude. This is included by default. arithmetic which allows a user to use + , - , * , / in their answers. dollars which allows a user to use predefined variables from the questions. These are called as $VARIABLE_NAME . grading must be either: exact_value which requires the user to give the exact answer. This the default value. exact_sigd which requires the user to give an answer correct to a specific number of significant digits. If used, digits becomes a required parameter. toler_abs which requires the user to give an answer correct to within a specific error. If used, err becomes a required parameter. toler_sigd which requires the user to give an answer correct to within a specific error at a specific decimal place. This means that if an answer had to be within 0.002, it would have an error of 2 at digit 3. If used, err and digit become required parameters. toler_perc which requires the use to give an answer correct to within a specific percentage of the correct answer. If used, perc becomes a required parameter. err represents an absolute error and must be a float or integer. This should only exist if grading is set to toler_abs or toler_sigd . digit represents the nth digit in a number and must be an integer. This should only exist if grading is set to exact_sigd or toler_sigd . perc represents a percentage and must be a float or integer. This should only exist if grading is set to toler_perc . Example Usage \u00b6 Taken from ME2 Fluid Mechanics tutorial sheet 2, this part contains a Numeric response area with some extra parameters. The response area now requires the user to input both a number and a unit using answer.units and showAnswer . The user has also been given a tolerance that their answer must fall into using grading and perc . In this case, Their answer must be equal to 2 \u00b1 5% m/s in order to get the point. { \"statement\" : \"We are going to test a \\\\(1/25\\\\) scale model of a \\\\(100\\\\,\\\\mathrm{m}\\\\) long ship. If the maximum velocity of the full-scale ship is \\\\(10\\\\,\\\\mathrm{m/s}\\\\), what should the maximum speed of the model be?\" , \"response\" : { \"mode\" : \"Numeric\" , \"grading\" : \"toler_perc\" , \"perc\" : 5.0 , \"showUnits\" : true , \"answer\" : { \"num\" : 2.0 , \"units\" : \"m/s\" } } }","title":"Numeric"},{"location":"ResponseAreas/Vanilla/numeric.html#numeric-response","text":"Numeric response areas accept a number for an answer. At their simplest, they can be a single input box expecting an exact value. However they can be controlled to accept a physical unit too, or mark answers to a prescribed tolerance.","title":"Numeric Response"},{"location":"ResponseAreas/Vanilla/numeric.html#minimum-parameters","text":"The minimum parameters needed to create a numeric response area are: mode which must be Numeric answer which must be an object containing num , which holds correct answer as a number. { \"mode\" : \"Numeric\" , \"answer\" : { \"num\" : 3.1415 } }","title":"Minimum Parameters"},{"location":"ResponseAreas/Vanilla/numeric.html#extra-parameters","text":"showUnits must be either true or false . This determines if the user must also put in a correct unit. If true, then answer.units becomes a required parameter. By default, it is false. units which must be placed within answer , must be a string containing the correct physical constant of the answer. This should only be added to properties if showUnits is true: { \"mode\" : \"Numeric\" , \"showUnits\" : true , \"answer\" : { \"num\" : 1000 , \"units\" : \"kg\" } } negStyle must be either minus , paren or both to allow a minus sign, parentheses or both to be used for negation. By default, it is minus . numStyle must be a string containing certain keywords words separated by a whitepace. These keywords are: thousands which allows a user to use commas as a seaparator in their answer. This is included by default. scientific which allows a user to use E+10 , E-3 , etc. to denote orders of magnitude. This is included by default. arithmetic which allows a user to use + , - , * , / in their answers. dollars which allows a user to use predefined variables from the questions. These are called as $VARIABLE_NAME . grading must be either: exact_value which requires the user to give the exact answer. This the default value. exact_sigd which requires the user to give an answer correct to a specific number of significant digits. If used, digits becomes a required parameter. toler_abs which requires the user to give an answer correct to within a specific error. If used, err becomes a required parameter. toler_sigd which requires the user to give an answer correct to within a specific error at a specific decimal place. This means that if an answer had to be within 0.002, it would have an error of 2 at digit 3. If used, err and digit become required parameters. toler_perc which requires the use to give an answer correct to within a specific percentage of the correct answer. If used, perc becomes a required parameter. err represents an absolute error and must be a float or integer. This should only exist if grading is set to toler_abs or toler_sigd . digit represents the nth digit in a number and must be an integer. This should only exist if grading is set to exact_sigd or toler_sigd . perc represents a percentage and must be a float or integer. This should only exist if grading is set to toler_perc .","title":"Extra Parameters"},{"location":"ResponseAreas/Vanilla/numeric.html#example-usage","text":"Taken from ME2 Fluid Mechanics tutorial sheet 2, this part contains a Numeric response area with some extra parameters. The response area now requires the user to input both a number and a unit using answer.units and showAnswer . The user has also been given a tolerance that their answer must fall into using grading and perc . In this case, Their answer must be equal to 2 \u00b1 5% m/s in order to get the point. { \"statement\" : \"We are going to test a \\\\(1/25\\\\) scale model of a \\\\(100\\\\,\\\\mathrm{m}\\\\) long ship. If the maximum velocity of the full-scale ship is \\\\(10\\\\,\\\\mathrm{m/s}\\\\), what should the maximum speed of the model be?\" , \"response\" : { \"mode\" : \"Numeric\" , \"grading\" : \"toler_perc\" , \"perc\" : 5.0 , \"showUnits\" : true , \"answer\" : { \"num\" : 2.0 , \"units\" : \"m/s\" } } }","title":"Example Usage"},{"location":"ResponseAreas/Vanilla/true_false.html","text":"True/False Response \u00b6 True/False response areas are a simpler form of Multiple Choice. Only two choices can exist which are true and false by default, and they are always displayed vertically. Minimum Parameters \u00b6 The minimum parameters needed to create a true/false response area are: mode must be True False . answer must be an integer. This value refers to the index (starting from 1) of the correct answer in the choices array. If using the preset, 1 refers to true and 2 refers to false . Extra Parameters \u00b6 choices must be a list containing two strings. This is [\"true\", \"false\"] by default, but it can be any text, HTML or LaTeX if escaped using \\\\( and \\\\) . Example Usage \u00b6 Taken from ME2 Fluid Mechanics tutorial sheet 11, this part contains a simple True/False response area, where the user must choose False , as in the list of choices, this is the second option. { \"statement\" : \"The Navier-Stokes equations imply a constant and uniform density field.\" , \"response\" : { \"mode\" : \"True False\" , \"answer\" : 2 } }","title":"True False"},{"location":"ResponseAreas/Vanilla/true_false.html#truefalse-response","text":"True/False response areas are a simpler form of Multiple Choice. Only two choices can exist which are true and false by default, and they are always displayed vertically.","title":"True/False Response"},{"location":"ResponseAreas/Vanilla/true_false.html#minimum-parameters","text":"The minimum parameters needed to create a true/false response area are: mode must be True False . answer must be an integer. This value refers to the index (starting from 1) of the correct answer in the choices array. If using the preset, 1 refers to true and 2 refers to false .","title":"Minimum Parameters"},{"location":"ResponseAreas/Vanilla/true_false.html#extra-parameters","text":"choices must be a list containing two strings. This is [\"true\", \"false\"] by default, but it can be any text, HTML or LaTeX if escaped using \\\\( and \\\\) .","title":"Extra Parameters"},{"location":"ResponseAreas/Vanilla/true_false.html#example-usage","text":"Taken from ME2 Fluid Mechanics tutorial sheet 11, this part contains a simple True/False response area, where the user must choose False , as in the list of choices, this is the second option. { \"statement\" : \"The Navier-Stokes equations imply a constant and uniform density field.\" , \"response\" : { \"mode\" : \"True False\" , \"answer\" : 2 } }","title":"Example Usage"},{"location":"SheetFiles/Parts.html","text":"Question Part \u00b6 This parameter is stored in the parts list in a question JSON file. It is the primary unit of content inside a question, holding: part statement response area media final answer worked solutions structured tutorial statement \u00b6 Part statement Example \"statement\" : \"Derive an expression for the acceleration\" Response areas \u00b6 Optional, these are items which students can interact with and submit their response(s) to a question's part, possibly getting feedback. We distinguish 2 types of response areas: Vanilla response areas, which are native to Mobius, and Advanced response areas which use these vanilla response areas to construct more complex response areas. Warning For a given part, there can only be one of response , responses or custom_response fields. Pre and Post Response area text \u00b6 Sometimes, extra text needs to be placed before (to specify which answer to add) or after a response area (to add units for example). This is what the pre_response_text and post_response_text parameters achieve. Placed in the main question part dictionary, these will add some text before or after a response area. Again, these are part level parameters. Example \"pre_response_text\" : \"f(x) = \" Importing single response areas \u00b6 All vanilla inputs (as well as the Matrix response area) can be added to a question by adding a response dictionary which holds all the parameters required by that type. These parameters are described in length in their relative documentation pages (see the Response Areas section) Example \"response\" : { \"mode\" : \"Maple\" , \"mapleAnswer\" : \"m*x + c\" } Importing Multiple response areas \u00b6 If multiple response areas are required for a part, these can be included similarly to single response areas , but in a list of dictionaries each containing a response . Now that an number of response areas will be displayed to a part, the pre_response_text and post_response_text will need to be used to indicate to the student which answer to input where. The can be added inside of each item in the responses list if required. Example \"responses\" : [ { \"pre_response_text\" : \"f(x) = \" , \"response\" : { \"mode\" : \"Maple\" , \"mapleAnswer\" : \"17*x + b\" } }, { \"pre_response_text\" : \"g = \" , \"response\" : { \"mode\" : \"Numeric\" , \"showUnits\" : true , \"answer\" : { \"num\" : \"9.81\" , \"units\" : \"m/s/s\" } }, \"post_response_text\" : \"m/s^2\" } ] Importing a custom response area \u00b6 When both the response and responses modules aren't enough, you can include a custom_response to your part. This gives author ultimate control over the position and styling of their response areas by allowing HTML, JavaScript and CSS to be input. Take me to the custom_response docs . media \u00b6 Optional, This parameter has the same syntax as the one used at the master statement question level. It will include any media referenced at part-level. Take me to its docs . final_answer \u00b6 Optional, part of the help module final answer block worked_solutions \u00b6 Optional, part of the help module block structured_tutorial \u00b6 Optional, part of the help module block","title":"Parts"},{"location":"SheetFiles/Parts.html#question-part","text":"This parameter is stored in the parts list in a question JSON file. It is the primary unit of content inside a question, holding: part statement response area media final answer worked solutions structured tutorial","title":"Question Part"},{"location":"SheetFiles/Parts.html#statement","text":"Part statement Example \"statement\" : \"Derive an expression for the acceleration\"","title":"statement"},{"location":"SheetFiles/Parts.html#response-areas","text":"Optional, these are items which students can interact with and submit their response(s) to a question's part, possibly getting feedback. We distinguish 2 types of response areas: Vanilla response areas, which are native to Mobius, and Advanced response areas which use these vanilla response areas to construct more complex response areas. Warning For a given part, there can only be one of response , responses or custom_response fields.","title":"Response areas"},{"location":"SheetFiles/Parts.html#pre-and-post-response-area-text","text":"Sometimes, extra text needs to be placed before (to specify which answer to add) or after a response area (to add units for example). This is what the pre_response_text and post_response_text parameters achieve. Placed in the main question part dictionary, these will add some text before or after a response area. Again, these are part level parameters. Example \"pre_response_text\" : \"f(x) = \"","title":"Pre and Post Response area text"},{"location":"SheetFiles/Parts.html#importing-single-response-areas","text":"All vanilla inputs (as well as the Matrix response area) can be added to a question by adding a response dictionary which holds all the parameters required by that type. These parameters are described in length in their relative documentation pages (see the Response Areas section) Example \"response\" : { \"mode\" : \"Maple\" , \"mapleAnswer\" : \"m*x + c\" }","title":"Importing single response areas"},{"location":"SheetFiles/Parts.html#importing-multiple-response-areas","text":"If multiple response areas are required for a part, these can be included similarly to single response areas , but in a list of dictionaries each containing a response . Now that an number of response areas will be displayed to a part, the pre_response_text and post_response_text will need to be used to indicate to the student which answer to input where. The can be added inside of each item in the responses list if required. Example \"responses\" : [ { \"pre_response_text\" : \"f(x) = \" , \"response\" : { \"mode\" : \"Maple\" , \"mapleAnswer\" : \"17*x + b\" } }, { \"pre_response_text\" : \"g = \" , \"response\" : { \"mode\" : \"Numeric\" , \"showUnits\" : true , \"answer\" : { \"num\" : \"9.81\" , \"units\" : \"m/s/s\" } }, \"post_response_text\" : \"m/s^2\" } ]","title":"Importing Multiple response areas"},{"location":"SheetFiles/Parts.html#importing-a-custom-response-area","text":"When both the response and responses modules aren't enough, you can include a custom_response to your part. This gives author ultimate control over the position and styling of their response areas by allowing HTML, JavaScript and CSS to be input. Take me to the custom_response docs .","title":"Importing a custom response area"},{"location":"SheetFiles/Parts.html#media","text":"Optional, This parameter has the same syntax as the one used at the master statement question level. It will include any media referenced at part-level. Take me to its docs .","title":"media"},{"location":"SheetFiles/Parts.html#final_answer","text":"Optional, part of the help module final answer block","title":"final_answer"},{"location":"SheetFiles/Parts.html#worked_solutions","text":"Optional, part of the help module block","title":"worked_solutions"},{"location":"SheetFiles/Parts.html#structured_tutorial","text":"Optional, part of the help module block","title":"structured_tutorial"},{"location":"SheetFiles/Questions.html","text":"Question File Documentation \u00b6 When authoring using Nobius, question files will be the ones you will spend most of your time in. These are the files which hold all information and content to be rendered into Mobius questions and sheets. Since all your work is saved in .json files, it lives separate from its form as Mobius content. This tool focuses on converting data from question files into Mobius-understandable content, however these files could be used anywhere else to generate .pdf, or LaTeX documents for example. Parameters \u00b6 title \u00b6 Optional but recommended, this string holds the title for the question file Example \"title\" : \"Decompose a flow field\" master_statement \u00b6 Optional but recommended, this string contains the question statement to appear over each part. It should hold general information relevant to all parts of the question, exposing the problem. Example \"master_statement\" : \"Verify the given theorem for the given function (by evaluating BOTH the volume integral and the six surface integrals)\" media \u00b6 Optional, this is a list strings containing the filenames (including extensions) for all media to import and display alongside the master_statement . Accepted file extensions include: .jpg , .png , .mp4 . Example \"media\" : [ \"cat.png\" , \"teacup.jpg\" , \"windmill.mp4\" ] Warning The file names you add in a media block are not checked with media files you've added to a sheet's Media folder. There is not active link between the files you reference in a question and the ones in that folder. This means it's the author's job to ensure import and uploads for media are done correctly icon_data \u00b6 Optional, This dictionary holds information about the icons displayed at the top right of the page. Example \"icon_data\" : { \"difficulty\" : 3 , \"par_time\" : [ 30 , 45 ], \"statement\" : \"Add a comment about the question here, maybe some context for why the question is asked.\" } difficulty \u00b6 This can be an integer from 1 to 3, corresponding to the amount of stars shown in the icons. They should be an indication of the relative difficulty of the question in that sheet. par_time \u00b6 This should be a array of length 2, containing the lower and upper bounds for the time required to complete the question, in minutes. These will be shown as a range on the clock icon, and used in the time analysis for a sheet shown to the author. parts \u00b6 This parameter holds information about each part of a question, it is a list of part objects. These have a great degree of customization and lots of features, which is why they get their own page in the docs! Take me to the part docs Example \"parts\" : [ { \"statement\" : \"Simplify 4*x + 3*x\" , \"response\" : { \"mode\" : \"Maple\" , \"mapleAnswer\" : \"7*x\" }, \"final_answer\" : { \"text\" : \"7*x\" } }, { \"statement\" : \"Plot y = 2x + 4\" } ] Best Practices \u00b6 Info Both the master_statement , statement and text fields accept raw HTML, so if you want to embed a video, add a table or image outside of the normal available places you can! Warning: This HTML isn't checked so make sure you close all the tags you've opened Single Part questions \u00b6 There are multiple ways of dealing with this case, a question that only has a single part (so just one statement). The general idea for something like this is: If the question doesn't require a response area, or help module (final answer, worked solutions, ...) then the question can entirely be created without a parts list, all in the master_statement . If the question does then the master_statement field should be removed or left empty, and all information added to a single part inside of the parts list.","title":"Question files"},{"location":"SheetFiles/Questions.html#question-file-documentation","text":"When authoring using Nobius, question files will be the ones you will spend most of your time in. These are the files which hold all information and content to be rendered into Mobius questions and sheets. Since all your work is saved in .json files, it lives separate from its form as Mobius content. This tool focuses on converting data from question files into Mobius-understandable content, however these files could be used anywhere else to generate .pdf, or LaTeX documents for example.","title":"Question File Documentation"},{"location":"SheetFiles/Questions.html#parameters","text":"","title":"Parameters"},{"location":"SheetFiles/Questions.html#title","text":"Optional but recommended, this string holds the title for the question file Example \"title\" : \"Decompose a flow field\"","title":"title"},{"location":"SheetFiles/Questions.html#master_statement","text":"Optional but recommended, this string contains the question statement to appear over each part. It should hold general information relevant to all parts of the question, exposing the problem. Example \"master_statement\" : \"Verify the given theorem for the given function (by evaluating BOTH the volume integral and the six surface integrals)\"","title":"master_statement"},{"location":"SheetFiles/Questions.html#media","text":"Optional, this is a list strings containing the filenames (including extensions) for all media to import and display alongside the master_statement . Accepted file extensions include: .jpg , .png , .mp4 . Example \"media\" : [ \"cat.png\" , \"teacup.jpg\" , \"windmill.mp4\" ] Warning The file names you add in a media block are not checked with media files you've added to a sheet's Media folder. There is not active link between the files you reference in a question and the ones in that folder. This means it's the author's job to ensure import and uploads for media are done correctly","title":"media"},{"location":"SheetFiles/Questions.html#icon_data","text":"Optional, This dictionary holds information about the icons displayed at the top right of the page. Example \"icon_data\" : { \"difficulty\" : 3 , \"par_time\" : [ 30 , 45 ], \"statement\" : \"Add a comment about the question here, maybe some context for why the question is asked.\" }","title":"icon_data"},{"location":"SheetFiles/Questions.html#difficulty","text":"This can be an integer from 1 to 3, corresponding to the amount of stars shown in the icons. They should be an indication of the relative difficulty of the question in that sheet.","title":"difficulty"},{"location":"SheetFiles/Questions.html#par_time","text":"This should be a array of length 2, containing the lower and upper bounds for the time required to complete the question, in minutes. These will be shown as a range on the clock icon, and used in the time analysis for a sheet shown to the author.","title":"par_time"},{"location":"SheetFiles/Questions.html#parts","text":"This parameter holds information about each part of a question, it is a list of part objects. These have a great degree of customization and lots of features, which is why they get their own page in the docs! Take me to the part docs Example \"parts\" : [ { \"statement\" : \"Simplify 4*x + 3*x\" , \"response\" : { \"mode\" : \"Maple\" , \"mapleAnswer\" : \"7*x\" }, \"final_answer\" : { \"text\" : \"7*x\" } }, { \"statement\" : \"Plot y = 2x + 4\" } ]","title":"parts"},{"location":"SheetFiles/Questions.html#best-practices","text":"Info Both the master_statement , statement and text fields accept raw HTML, so if you want to embed a video, add a table or image outside of the normal available places you can! Warning: This HTML isn't checked so make sure you close all the tags you've opened","title":"Best Practices"},{"location":"SheetFiles/Questions.html#single-part-questions","text":"There are multiple ways of dealing with this case, a question that only has a single part (so just one statement). The general idea for something like this is: If the question doesn't require a response area, or help module (final answer, worked solutions, ...) then the question can entirely be created without a parts list, all in the master_statement . If the question does then the master_statement field should be removed or left empty, and all information added to a single part inside of the parts list.","title":"Single Part questions"},{"location":"SheetFiles/SheetFileStructure.html","text":"Sheet File Structure \u00b6 The Nobius set of tools is very opinionated in the structure of its input data. Content should be separated in different questions which belong in sheets. Each sheet should have its own folder containing its relevant questions , media and SheetInfo.json file which dictates some of its parameters. Folder structure \u00b6 Sheet Folder \u251c\u2500\u2500 SheetInfo.json \u251c\u2500\u2500 Question.json \u251c\u2500\u2500 Another Question.json \u251c\u2500\u2500 ... \u2502 \u251c\u2500\u2500\u2500 Media \u2502 \u251c\u2500\u2500 image.png \u2502 \u251c\u2500\u2500 video.mp4 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500\u2500 renders (generated automatically) Example Sheet.xml Example Sheet.zip First of all, when generating a sheet, you must make sure that the folder you are selecting contains a SheetInfo.json . The folder should also contain all the JSON files for each of the questions in that sheet. Finally, if some questions require media, the folder should also contain a Media directory in which all media for the sheet can be placed. When you run the script, the output files will be placed in a renders folder in your chosen directory. Info All .json files contained in a sheet will be given uids when they are first rendered by generateGroup or generateAll Question \u00b6 These files live in the main sheet directory, and hold the actual content data of each question. This includes any question parts, media references and response areas.","title":"Sheet File Structure"},{"location":"SheetFiles/SheetFileStructure.html#sheet-file-structure","text":"The Nobius set of tools is very opinionated in the structure of its input data. Content should be separated in different questions which belong in sheets. Each sheet should have its own folder containing its relevant questions , media and SheetInfo.json file which dictates some of its parameters.","title":"Sheet File Structure"},{"location":"SheetFiles/SheetFileStructure.html#folder-structure","text":"Sheet Folder \u251c\u2500\u2500 SheetInfo.json \u251c\u2500\u2500 Question.json \u251c\u2500\u2500 Another Question.json \u251c\u2500\u2500 ... \u2502 \u251c\u2500\u2500\u2500 Media \u2502 \u251c\u2500\u2500 image.png \u2502 \u251c\u2500\u2500 video.mp4 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500\u2500 renders (generated automatically) Example Sheet.xml Example Sheet.zip First of all, when generating a sheet, you must make sure that the folder you are selecting contains a SheetInfo.json . The folder should also contain all the JSON files for each of the questions in that sheet. Finally, if some questions require media, the folder should also contain a Media directory in which all media for the sheet can be placed. When you run the script, the output files will be placed in a renders folder in your chosen directory. Info All .json files contained in a sheet will be given uids when they are first rendered by generateGroup or generateAll","title":"Folder structure"},{"location":"SheetFiles/SheetFileStructure.html#question","text":"These files live in the main sheet directory, and hold the actual content data of each question. This includes any question parts, media references and response areas.","title":"Question"},{"location":"SheetFiles/SheetInfo.html","text":"SheetInfo \u00b6 The SheetInfo.json file should appear in the folder for any sheet you want to generate. It contains information about which questions it contains, as well as its name and description. Parameters \u00b6 name The sheet's name (string) number When you have multiple sheets, it might be useful to give it a number. This number will be appended to the front of each question rendered in this sheet (i.e. Q2.2 is the second question from sheet number 2) description Optional parameter, will display some text under the Mobius group when uploaded, only for the author to see. questions List of strings corresponding to the filenames of the question json files to be imported in this sheet. The order matters here as each questions will be numbered according to its place in this list. uid Don't worry about this parameter, it will be automatically generated when you render the sheet Example SheetInfo.json \u00b6 { \"name\" : \"The Navier-Stokes equations\" , \"description\" : \"V1.1 last edited 02/10/2020\" , \"questions\" : [ \"Fundamentals\" , \"Kinematics in Cartesian coordinates\" , \"Kinematics in cylindrical coordinates\" , \"Rigid-body rotation-1\" , \"Rigid-body rotation-2\" , \"Free vortex\" , \"Flow between two parallel plates\" ], \"number\" : 10 , \"uid\" : \"43d2d5aa-57bb-48e0-b9f6-617211ccc4ed\" }","title":"SheetInfo.json"},{"location":"SheetFiles/SheetInfo.html#sheetinfo","text":"The SheetInfo.json file should appear in the folder for any sheet you want to generate. It contains information about which questions it contains, as well as its name and description.","title":"SheetInfo"},{"location":"SheetFiles/SheetInfo.html#parameters","text":"name The sheet's name (string) number When you have multiple sheets, it might be useful to give it a number. This number will be appended to the front of each question rendered in this sheet (i.e. Q2.2 is the second question from sheet number 2) description Optional parameter, will display some text under the Mobius group when uploaded, only for the author to see. questions List of strings corresponding to the filenames of the question json files to be imported in this sheet. The order matters here as each questions will be numbered according to its place in this list. uid Don't worry about this parameter, it will be automatically generated when you render the sheet","title":"Parameters"},{"location":"SheetFiles/SheetInfo.html#example-sheetinfojson","text":"{ \"name\" : \"The Navier-Stokes equations\" , \"description\" : \"V1.1 last edited 02/10/2020\" , \"questions\" : [ \"Fundamentals\" , \"Kinematics in Cartesian coordinates\" , \"Kinematics in cylindrical coordinates\" , \"Rigid-body rotation-1\" , \"Rigid-body rotation-2\" , \"Free vortex\" , \"Flow between two parallel plates\" ], \"number\" : 10 , \"uid\" : \"43d2d5aa-57bb-48e0-b9f6-617211ccc4ed\" }","title":"Example SheetInfo.json"},{"location":"Usage/generateAll.html","text":"generateALl.py Documentation \u00b6 Docs coming soon, run python generateALl.py -h for some help","title":"generateAll.py"},{"location":"Usage/generateAll.html#generateallpy-documentation","text":"Docs coming soon, run python generateALl.py -h for some help","title":"generateALl.py Documentation"},{"location":"Usage/generateGroup.html","text":"generateGroup.py \u00b6 Introduction \u00b6 generateGroup.py is the main script from the Nobius toolset. It will convert your sheet folders into .xml and .zip files which can be imported directly into Mobius. Its main function is to populate the different template files with the question and sheet content you've made in JSON format. However is also validates data passed to it using a schema (ensuring the content uploaded to Mobius will be displayed properly), and takes care of adding defaults when no parameters are given. Prerequisites \u00b6 Info A list of requirements is available in the requirements.txt file - to install them simply type pip install -r requirements.txt in your commandline In order to use this tool, python 3.6 or higher is required. The main modules used by this script are: jinja2 - This is the templating engine used by the script to generate the html and xml mobius content. For more information on templating, you can visit Templating and Jinja . jsonschema - This package is used to check the format and structure of data coming into the templating engine will be rendered properly and most importantly won't crash Mobius. Usage \u00b6 To use this tool, you should navigate to its location (the Sheet Generator folder), and call it using python as so: python generateGroup.py FILEPATH [--reset-uid or -uid] [-h] FILEPATH is a required positional argument corresponding to the absolute or relative path to where you have stored the sheet folder you'd like to render. Note: if the path is susceptible to have spaces in folder names (like with certain OneDrive paths), be sure to encapsulate it in double quotes as shown in the example command --reset-uid or -uid is an optional flag that will cause all the UIDs from your sheet files to be re-generated (both sheetInfo.json and question files). Use this flag when you've already uploaded a version of the sheet you're rendering to mobius, and you don't want to override it. Note: if you have changed the order, or names of some of the questions it's a good idea to set this flag and delete the previous version of that sheet from mobius . Tip If you ever forget which arguments are accepted, and what they mean you can run python generateGroup.py -h to bring up the help menu for this script! Example command \u00b6 python generateGroup.py \"C:\\Users\\bob\\Desktop\\My new sheet\" -uid","title":"generateGroup.py"},{"location":"Usage/generateGroup.html#generategrouppy","text":"","title":"generateGroup.py"},{"location":"Usage/generateGroup.html#introduction","text":"generateGroup.py is the main script from the Nobius toolset. It will convert your sheet folders into .xml and .zip files which can be imported directly into Mobius. Its main function is to populate the different template files with the question and sheet content you've made in JSON format. However is also validates data passed to it using a schema (ensuring the content uploaded to Mobius will be displayed properly), and takes care of adding defaults when no parameters are given.","title":"Introduction"},{"location":"Usage/generateGroup.html#prerequisites","text":"Info A list of requirements is available in the requirements.txt file - to install them simply type pip install -r requirements.txt in your commandline In order to use this tool, python 3.6 or higher is required. The main modules used by this script are: jinja2 - This is the templating engine used by the script to generate the html and xml mobius content. For more information on templating, you can visit Templating and Jinja . jsonschema - This package is used to check the format and structure of data coming into the templating engine will be rendered properly and most importantly won't crash Mobius.","title":"Prerequisites"},{"location":"Usage/generateGroup.html#usage","text":"To use this tool, you should navigate to its location (the Sheet Generator folder), and call it using python as so: python generateGroup.py FILEPATH [--reset-uid or -uid] [-h] FILEPATH is a required positional argument corresponding to the absolute or relative path to where you have stored the sheet folder you'd like to render. Note: if the path is susceptible to have spaces in folder names (like with certain OneDrive paths), be sure to encapsulate it in double quotes as shown in the example command --reset-uid or -uid is an optional flag that will cause all the UIDs from your sheet files to be re-generated (both sheetInfo.json and question files). Use this flag when you've already uploaded a version of the sheet you're rendering to mobius, and you don't want to override it. Note: if you have changed the order, or names of some of the questions it's a good idea to set this flag and delete the previous version of that sheet from mobius . Tip If you ever forget which arguments are accepted, and what they mean you can run python generateGroup.py -h to bring up the help menu for this script!","title":"Usage"},{"location":"Usage/generateGroup.html#example-command","text":"python generateGroup.py \"C:\\Users\\bob\\Desktop\\My new sheet\" -uid","title":"Example command"},{"location":"Usage/generateJSON.html","text":"generateJSON.py Documentation \u00b6 Introduction \u00b6 generateJSON.py is a tool in Nobius that allows Mobius' Group files to be converted back to JSON files. This is useful if small changes need to be made to a question or group, as they can be made within the Mobius editor online, and the JSON files can be updated using this script on the updated Group file. Note this tool will only work on Group files generated by the Nobius toolset. This is to preserve the structure of the JSON file as well as ensure the conversion process is robust. Prerequisites \u00b6 In order to use this tool, python 3.6 or higher is required. Additionally a few modules need to be installed: bs4 or BeautifulSoup. This is a parser used to get html and xml attributes from the question files. lxml . This is a toolkit used in conjunction with BeautifulSoup to parse the xml. Both these modules can be installed used pip : python -m pip install bs4 lxml Usage \u00b6 To use this tool, call the file through python within the Sheet Generator folder: python generateJSON.py FILEPATH -d DESTINATION --no-uid Where: FILEPATH is a required argument, showing the path to the xml file to be converted. DESTINATION is an optional argument, given by the -d or --destination flag, telling the script where to write the JSON files to. By default, this is the same directory as the target xml file. --no-uid is an optional flag, telling the script to remove all uid , modifiedBy and school properties from the JSON files. This is incase you wish to create a completely new group that will not overwrite the current one in Mobius. The script will print useful information, indicating what properties were missed. These will be replaced with a null value in the JSON if the property could be nested, but its value is unknown. The html element where the value is expected to be will be printed, allowing the user to fill in the missing information in case it is a fault of the script.","title":"generateJSON.py"},{"location":"Usage/generateJSON.html#generatejsonpy-documentation","text":"","title":"generateJSON.py Documentation"},{"location":"Usage/generateJSON.html#introduction","text":"generateJSON.py is a tool in Nobius that allows Mobius' Group files to be converted back to JSON files. This is useful if small changes need to be made to a question or group, as they can be made within the Mobius editor online, and the JSON files can be updated using this script on the updated Group file. Note this tool will only work on Group files generated by the Nobius toolset. This is to preserve the structure of the JSON file as well as ensure the conversion process is robust.","title":"Introduction"},{"location":"Usage/generateJSON.html#prerequisites","text":"In order to use this tool, python 3.6 or higher is required. Additionally a few modules need to be installed: bs4 or BeautifulSoup. This is a parser used to get html and xml attributes from the question files. lxml . This is a toolkit used in conjunction with BeautifulSoup to parse the xml. Both these modules can be installed used pip : python -m pip install bs4 lxml","title":"Prerequisites"},{"location":"Usage/generateJSON.html#usage","text":"To use this tool, call the file through python within the Sheet Generator folder: python generateJSON.py FILEPATH -d DESTINATION --no-uid Where: FILEPATH is a required argument, showing the path to the xml file to be converted. DESTINATION is an optional argument, given by the -d or --destination flag, telling the script where to write the JSON files to. By default, this is the same directory as the target xml file. --no-uid is an optional flag, telling the script to remove all uid , modifiedBy and school properties from the JSON files. This is incase you wish to create a completely new group that will not overwrite the current one in Mobius. The script will print useful information, indicating what properties were missed. These will be replaced with a null value in the JSON if the property could be nested, but its value is unknown. The html element where the value is expected to be will be printed, allowing the user to fill in the missing information in case it is a fault of the script.","title":"Usage"},{"location":"Usage/notes.html","text":"Questions from Peter - should we answered in the docs \u00b6 Reset uids wehn rendering new sheet if mixed and matched Requirements.txt? Update jsonschema when Draft7 error Can't add comments to a json file Single part questions standard is_final_answer docs","title":"Questions from Peter - should we answered in the docs"},{"location":"Usage/notes.html#questions-from-peter-should-we-answered-in-the-docs","text":"Reset uids wehn rendering new sheet if mixed and matched Requirements.txt? Update jsonschema when Draft7 error Can't add comments to a json file Single part questions standard is_final_answer docs","title":"Questions from Peter - should we answered in the docs"}]}